# import {GraphQLScalarType, Kind} from 'graphql'
# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Player @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) @searchable
  # @auth(rules: [{ allow: public, operations: [read]}]) 
{
  id: ID!
  # userGUID: ID!
  name: String!
  email: AWSEmail!
  phone: AWSPhone
  about: String
  image: String
  NTRP: String
  UTR: String
  verified: Boolean! @default(value: "false")
  matches: [Match!] @hasMany  
  ladders: [Ladder!] @manyToMany(relationName: "ladderPlayer")
  comments: [Comment!] @hasMany(indexName: "byPlayer", fields: ["id"])
}

type Ladder @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) @searchable {
  id: ID!
  name: String!
  location: Location!
  city: String
  zip: String
  matches: [Match!] @hasMany  
  players: [Player!] @manyToMany(relationName: "ladderPlayer")
}

type Location {   
  lat: Float!   
  lon: Float! 
}

type Standings @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) {
  id: ID!
  player: Player! @hasOne
  ladder: Ladder! @hasOne
  points: Int! @default(value: "0")
  position: Int! @default(value: "0")
}

type Match @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) @searchable {
  id: ID!
  type: String @default(value: "singles")
  playedOn: AWSDate! 
  year: Int! @default(value: "2022")
  winnerID: ID
  winner: Player! @belongsTo(fields: ["winnerID"])
  loserID: ID
  loser: Player!  @belongsTo(fields: ["loserID"])
  score: String!
  setsWon: Int! @default(value: "0")
  setsLost: Int! @default(value: "0")
  gamesWon: Int! @default(value: "0")
  gamesLost: Int! @default(value: "0")
  tiebreaksWon: Int! @default(value: "0")
  tiebreaksLost: Int! @default(value: "0")
  retired: Boolean @default(value: "false")
  ladderID: ID
  ladder: Ladder @belongsTo(fields: ["ladderID"])
  comments: [Comment!] @hasMany(indexName: "byMatch", fields: ["id"])
}

type Comment @model(timestamps: { createdAt: "createdOn", updatedAt: "updatedOn" }) {
  id: ID!
  matchID: ID! @index(name: "byMatch", sortKeyFields: ["content"])
  match: Match @belongsTo(fields: ["matchID"])
  content: String!
  postedByID: ID! @index(name: "byPlayer", sortKeyFields: ["content"])
  postedBy: Player @belongsTo(fields: ["postedByID"]) 
}
