Overall design
    a. Mobile vs computer menu
    b. Style and clean up
    c. Search for players
    d. Add location library for ladder locations

Search page
    a. Searches for different categories (ladder, players, locations?)

Profile page
    a. Style and clean up
    b. List ladders
    c. Get UTR results from UTR profile
    d. Link USTA profile
    e. Add statistics
    f. H2H information / greatest rivals 

Ladders page
    a. Display (5) ladders near you 
    b. Search available ladders
    c. Create a ladder 
        1. Check if already exists and give suggestion
        2. Doubles or singels
    d. Add to menu

Ladder page
    a. Join ladder
    b. View ladder players
    c. Add match
    d. See standing at particular date
    e. If doubles, search for partner
        sign-up with partner (one partner for each ladder)
        if no partner, sign up as available / reserved (for a player yet to sign up)
        split up from partner (leave ladder)
    f. Leave ladder (double-check, since you lose all your ranking points)

Matches
    a. Separate doubles from singels
    b. Allow practice matches outside of a ladder
    c. Post result to UTR
    d. Add comments
    e. Calculate standings / ranking points




query GetUserStats {
  searchMatches(filter: {
    or: [
          { winnerID: { eq: "2" } },
          { loserID: { eq: "2" } }
        ]      
    }, 
    aggregates: 
    [
      {field: winnerID, name: "matchesWon", type: terms},
      {field: loserID, name: "matchesLost", type: terms},
      {field: setsLost, name: "setsLost", type: sum},
      {field: setsWon, name: "setsWon", type: sum},
      {field: tiebreaksLost, name: "tiebreaksLost", type: sum},
      {field: tiebreaksWon, name: "tiebreaksWon", type: sum},
      {field: gamesLost, name: "gamesLost", type: sum},
      {field: gamesWon, name: "gamesWon", type: sum}
    ]) {
    aggregateItems {
      result {
        ... on SearchableAggregateScalarResult {
          __typename
          value
        }
      }
        ... on SearchableAggregateBucketResult {
          __typename
          buckets {
            key
            doc_count
          }
        }
      name
    }
  }
}